//см. 76 строчку!!!
//var ff = required_file.All();
//console.log(required_file.All());
//console.log(required_file.logger);
//console.log(process.cache);
//var node_cache = require('node-cache');
//console.log(node_cache);
//addToArray("./required/logger.js");
/*
console.log(typeof require.cache[require.resolve('./required')].exports);
//var m=require.cache[require.resolve('./required')].exports;
var newFunc;
for(key in require.cache[require.resolve('./required')].exports)
{
    var k = require.cache[require.resolve('./required')].exports[key];//объект

    console.log(typeof require.cache[require.resolve('./required')].exports[key].length);//тип того, что внутри модуля

    console.log(require.cache[require.resolve('./required')].exports[key].length);//количество аргументов

    //console.log();
    newFunc = require.cache[require.resolve('./required')].exports[key].bind(null);//вызов функции

}
console.log("newFunc is working: "+newFunc(12));
*/
//console.log(JSON.parse(require.cache[require.resolve('./required')].exports.toString()));
function Initialization()
{
    //пробежаться по всему required и require(всё)
    //загнать модули в массив

}
function addToArray(filePath)
{
    if(fs.existsSync(filePath))
    {
        console.log(fs.readFileSync(filePath,{encoding:'utf-8'}));
        if(fs.existsSync("./required.js"))
        {
            fs.appendFileSync('./required.js',"\r\n'"+filePath+"'",{encoding:'utf-8'});
        }
    }
    function addStringToEndOfFile(String)
    {

    }
    //1-дописываем в файл required.js информацию о новом файле.
    //2-сделать require для нового модуля(позже)
    //3-вынуть список функций из модуля
    //3.1-распарсить модуль module_parser.js
    //3.2-если есть вложенные модули, то проверяем, есть ли уже require(их)
    //4-добавить в массив модуль и список его функций


}

function ArrayObject()
{
    this.a1=1;
    this.a2=2;
}
ArrayObject.prototype.plus = function(a,b)
{
    this.a1=a+b;
    return a+b;
}
ArrayObject.prototype.minus = function(a,b)
{
    this.a2 = a-b;
    return a-b;
}




var http = require('http');
var url = require('url');
var querystring = require('querystring');
var static = require('node-static');
var file = new static.Server('.', {
  cache: 0
});


function accept(req, res) {

  if (req.url == '/upload') {
    var length = 0;
    req.on('data', function(chunk) {
      // ничего не делаем с приходящими данными, просто считываем
      length += chunk.length;
      if (length > 50 * 1024 * 1024) {
        res.statusCode = 413;
        res.end("File too big");
      }
    }).on('end', function() {
      res.end('ok');
    });

  } else {
    file.serve(req, res);
  }

}


// ------ запустить сервер -------

if (!module.parent) {
  http.createServer(accept).listen(8080);
} else {
  exports.accept = accept;
}